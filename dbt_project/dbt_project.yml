# dbt_project.yml

# Project name (should match the directory name)
name: 'agronegocio_analytics'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'agronegocio_analytics' # Matches the profile name in profiles.yml

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  agronegocio_analytics:
    # Configures models found in models/marts/
    marts:
      +materialized: table # Default materialization for models in marts/
      # For ClickHouse, you might want to specify engine settings here or per model
      # Example:
      # +engine: MergeTree()
      # +order_by: (some_id, event_date)
      # +partition_by: toYYYYMM(event_date)
      # +settings:
      #   index_granularity: 8192
    # You can define staging or intermediate model configs similarly
    # staging:
    #   +materialized: view
    # intermediate:
    #   +materialized: ephemeral

# Target path for compiled artifacts
target-path: "target"  # directory for compiled SQL files
clean-targets:         # directories removed by `dbt clean`
  - "target"
  - "dbt_packages"

# ClickHouse specific configurations can also be set here if needed,
# though most connection details go into profiles.yml.
# For example, quoting strategies:
# quoting:
#   database: true
#   schema: true
#   identifier: true

# If using specific packages (e.g., dbt_utils), declare them here:
# packages:
#   - package: dbt-labs/dbt_utils
#     version: 1.0.0 # Specify version
# Ensure you run `dbt deps` if you add packages.

# Vars can be defined here and used in models with {{ var('my_variable') }}
# vars:
#   my_project_variable: "example_value"

# On-run-start and on-run-end hooks can be defined here
on-run-start:
  - "{{ log('Starting dbt run for agronegocio_analytics', info=True) }}"
  # Create the 'marts' database (schema in ClickHouse terms) if it doesn't exist.
  # This is where the fct_analise_risco model will be materialized.
  - "CREATE DATABASE IF NOT EXISTS marts"

# Seeds configuration (if you use CSV seeds)
# seeds:
#   agronegocio_analytics:
#     +schema: "raw_data" # Example: load seeds into a specific schema
#     +quote_columns: false # Default is true, set to false if your CSVs don't need quoting
#     +full_refresh: true # Default for seeds is true
#     +column_types:
#       my_column: varchar
#       another_column: int
#     # For ClickHouse, you might specify the engine for tables created from seeds
#     # +engine: MergeTree()
#     # +order_by: (id)
#     # +partition_by: (toYYYYMM(date_column))
#     # +settings:
#     #   index_granularity: 8192

# On-run-start and on-run-end hooks can be defined here
# on-run-start:
#   - "{{ log('Starting dbt run for agronegocio_analytics', info=True) }}"
#   - "CREATE SCHEMA IF NOT EXISTS marts;" # Example for ClickHouse

# on-run-end:
#   - "{{ log('Completed dbt run for agronegocio_analytics', info=True) }}"
#   - "GRANT SELECT ON ALL TABLES IN SCHEMA marts TO bi_user;" # Example
